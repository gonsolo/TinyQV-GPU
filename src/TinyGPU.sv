// Generated by CIRCT firtool-1.128.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module TinyGPU(	// src/main/scala/TinyGPU.scala:10:7
  input         clock,	// src/main/scala/TinyGPU.scala:10:7
                reset,	// src/main/scala/TinyGPU.scala:10:7
  input  [7:0]  io_ui_in,	// src/main/scala/TinyGPU.scala:11:14
  output [7:0]  io_uo_out,	// src/main/scala/TinyGPU.scala:11:14
  input  [5:0]  io_address,	// src/main/scala/TinyGPU.scala:11:14
  input  [31:0] io_data_in,	// src/main/scala/TinyGPU.scala:11:14
  input  [1:0]  io_data_write_n,	// src/main/scala/TinyGPU.scala:11:14
                io_data_read_n,	// src/main/scala/TinyGPU.scala:11:14
  output [31:0] io_data_out,	// src/main/scala/TinyGPU.scala:11:14
  output        io_data_ready,	// src/main/scala/TinyGPU.scala:11:14
                io_user_interrupt	// src/main/scala/TinyGPU.scala:11:14
);

  reg  [31:0] example_data;	// src/main/scala/TinyGPU.scala:23:29
  wire        _io_data_out_T = io_address == 6'h0;	// src/main/scala/TinyGPU.scala:30:17
  reg         example_interrupt;	// src/main/scala/TinyGPU.scala:54:34
  reg         last_ui_in_6;	// src/main/scala/TinyGPU.scala:55:29
  always @(posedge clock) begin	// src/main/scala/TinyGPU.scala:10:7
    if (reset) begin	// src/main/scala/TinyGPU.scala:10:7
      example_data <= 32'h0;	// src/main/scala/TinyGPU.scala:23:29
      example_interrupt <= 1'h0;	// src/main/scala/TinyGPU.scala:10:7, :54:34
      last_ui_in_6 <= 1'h0;	// src/main/scala/TinyGPU.scala:10:7, :55:29
    end
    else begin	// src/main/scala/TinyGPU.scala:10:7
      if (_io_data_out_T & io_data_write_n == 2'h2)	// src/main/scala/TinyGPU.scala:10:7, :30:{17,28,47}
        example_data <= io_data_in;	// src/main/scala/TinyGPU.scala:23:29
      else if (_io_data_out_T & io_data_write_n == 2'h1)	// src/main/scala/TinyGPU.scala:10:7, :30:17, :32:{28,47}
        example_data <= {example_data[31:16], io_data_in[15:0]};	// src/main/scala/TinyGPU.scala:23:29, :32:{66,79,99}
      else if (_io_data_out_T & io_data_write_n == 2'h0)	// src/main/scala/TinyGPU.scala:10:7, :30:17, :34:{28,47}
        example_data <= {example_data[31:8], io_data_in[7:0]};	// src/main/scala/TinyGPU.scala:23:29, :34:{66,79,98}
      example_interrupt <=
        io_ui_in[6] & ~last_ui_in_6
        | ~(io_address == 6'h8 & io_data_write_n != 2'h3 & io_data_in[0])
        & example_interrupt;	// src/main/scala/TinyGPU.scala:54:34, :55:29, :57:{16,20,23,38}, :58:23, :59:{25,36,55,67,80,93}, :60:23
      last_ui_in_6 <= io_ui_in[6];	// src/main/scala/TinyGPU.scala:55:29, :57:16
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/TinyGPU.scala:10:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/TinyGPU.scala:10:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/TinyGPU.scala:10:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// src/main/scala/TinyGPU.scala:10:7
    initial begin	// src/main/scala/TinyGPU.scala:10:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/TinyGPU.scala:10:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/TinyGPU.scala:10:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/TinyGPU.scala:10:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// src/main/scala/TinyGPU.scala:10:7
        end	// src/main/scala/TinyGPU.scala:10:7
        example_data = _RANDOM[1'h0];	// src/main/scala/TinyGPU.scala:10:7, :23:29
        example_interrupt = _RANDOM[1'h1][0];	// src/main/scala/TinyGPU.scala:10:7, :54:34
        last_ui_in_6 = _RANDOM[1'h1][1];	// src/main/scala/TinyGPU.scala:10:7, :54:34, :55:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/TinyGPU.scala:10:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/TinyGPU.scala:10:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_uo_out = example_data[7:0] + io_ui_in;	// src/main/scala/TinyGPU.scala:10:7, :23:29, :40:{28,35}
  assign io_data_out =
    _io_data_out_T ? example_data : io_address == 6'h4 ? {24'h0, io_ui_in} : 32'h0;	// src/main/scala/TinyGPU.scala:10:7, :23:29, :30:17, :47:{17,44}, src/main/scala/chisel3/util/Mux.scala:130:16
  assign io_data_ready = 1'h1;	// src/main/scala/TinyGPU.scala:10:7
  assign io_user_interrupt = example_interrupt;	// src/main/scala/TinyGPU.scala:10:7, :54:34
endmodule

